/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
/*****************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one                *
 * or more contributor license agreements.  See the NOTICE file              *
 * distributed with this work for additional information                     *
 * regarding copyright ownership.  The ASF licenses this file                *
 * to you under the Apache License, Version 2.0 (the                         *
 * "License"); you may not use this file except in compliance                *
 * with the License.  You may obtain a copy of the License at                *
 *                                                                           *
 *     http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                           *
 * Unless required by applicable law or agreed to in writing,                *
 * software distributed under the License is distributed on an               *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *
 * KIND, either express or implied.  See the License for the                 *
 * specific language governing permissions and limitations                   *
 * under the License.                                                        *
 *                                                                           *
 *                                                                           *
 * This file is part of the BeanShell Java Scripting distribution.           *
 * Documentation and updates may be found at http://www.beanshell.org/       *
 * Patrick Niemeyer (pat@pat.net)                                            *
 * Author of Learning Java, O'Reilly & Associates                            *
 *                                                                           *
 *****************************************************************************/
package bsh;

public interface ParserConstants {

    int EOF = 0;                            //  eof
    int NONPRINTABLE = 6;                   //  nonprintable
    int SINGLE_LINE_COMMENT = 7;            //  single_line_comment
    int HASH_BANG_COMMENT = 8;              //  hash_bang_comment
    int MULTI_LINE_COMMENT = 9;             //  multi_line_comment
    int ABSTRACT = 10;                      //  abstract
    int BOOLEAN = 11;                       //  boolean
    int BREAK = 12;                         //  break
    int CLASS = 13;                         //  class
    int BYTE = 14;                          //  byte
    int CASE = 15;                          //  case
    int CATCH = 16;                         //  catch
    int CHAR = 17;                          //  char
    int CONST = 18;                         //  const
    int CONTINUE = 19;                      //  continue
    int _DEFAULT = 20;                      //  default
    int DO = 21;                            //  do
    int DOUBLE = 22;                        //  double
    int ELSE = 23;                          //  else
    int ENUM = 24;                          //  enum
    int EXTENDS = 25;                       //  extends
    int FALSE = 26;                         //  false
    int FINAL = 27;                         //  final
    int FINALLY = 28;                       //  finally
    int FLOAT = 29;                         //  float
    int FOR = 30;                           //  for
    int GOTO = 31;                          //  goto
    int IF = 32;                            //  if
    int IMPLEMENTS = 33;                    //  implements
    int IMPORT = 34;                        //  import
    int INSTANCEOF = 35;                    //  instanceof
    int INT = 36;                           //  int
    int INTERFACE = 37;                     //  interface
    int LONG = 38;                          //  long
    int NATIVE = 39;                        //  native
    int NEW = 40;                           //  new
    int NULL = 41;                          //  null
    int PACKAGE = 42;                       //  package
    int PRIVATE = 43;                       //  private
    int PROTECTED = 44;                     //  protected
    int PUBLIC = 45;                        //  public
    int RETURN = 46;                        //  return
    int SHORT = 47;                         //  short
    int STATIC = 48;                        //  static
    int STRICTFP = 49;                      //  strictfp
    int SWITCH = 50;                        //  switch
    int SYNCHRONIZED = 51;                  //  synchronized
    int TRANSIENT = 52;                     //  transient
    int THROW = 53;                         //  throw
    int THROWS = 54;                        //  throws
    int TRUE = 55;                          //  true
    int TRY = 56;                           //  try
    int VOID = 57;                          //  void
    int VOLATILE = 58;                      //  volatile
    int WHILE = 59;                         //  while
    int INTEGER_LITERAL = 60;               //  integer_literal
    int DECIMAL_LITERAL = 61;               //  decimal_literal
    int HEX_LITERAL = 62;                   //  hex_literal
    int OCTAL_LITERAL = 63;                 //  octal_literal
    int FLOATING_POINT_LITERAL = 64;        //  floating_point_literal
    int EXPONENT = 65;                      //  exponent
    int CHARACTER_LITERAL = 66;             //  character_literal
    int STRING_LITERAL = 67;                //  string_literal
    int FORMAL_COMMENT = 68;                //  formal_comment
    int IDENTIFIER = 69;                    //  identifier
    int LETTER = 70;                        //  letter
    int DIGIT = 71;                         //  digit
    int LPAREN = 72;                        //  (
    int RPAREN = 73;                        //  )
    int LBRACE = 74;                        //  {
    int RBRACE = 75;                        //  }
    int LBRACKET = 76;                      //  [
    int RBRACKET = 77;                      //  ]
    int SEMICOLON = 78;                     //  ;
    int COMMA = 79;                         //  ,
    int DOT = 80;                           //  .
    int ASSIGN = 81;                        //  =
    int GT = 82;                            //  >
    int GTX = 83;                           //  @gt
    int LT = 84;                            //  <
    int LTX = 85;                           //  @lt
    int BANG = 86;                          //  !
    int TILDE = 87;                         //  ~
    int HOOK = 88;                          //  ?
    int COLON = 89;                         //  :
    int EQ = 90;                            //  ==
    int LE = 91;                            //  <=
    int LEX = 92;                           //  @lteq
    int GE = 93;                            //  >=
    int GEX = 94;                           //  @gteq
    int NE = 95;                            //  !=
    int BOOL_OR = 96;                       //  ||
    int BOOL_ORX = 97;                      //  @or
    int BOOL_AND = 98;                      //  &&
    int BOOL_ANDX = 99;                     //  @and
    int INCR = 100;                         //  ++
    int DECR = 101;                         //  --
    int PLUS = 102;                         //  +
    int MINUS = 103;                        //  -
    int STAR = 104;                         //  *
    int SLASH = 105;                        //  /
    int BIT_AND = 106;                      //  &
    int BIT_ANDX = 107;                     //  @bitwise_and
    int BIT_OR = 108;                       //  |
    int BIT_ORX = 109;                      //  @bitwise_or
    int XOR = 110;                          //  ^
    int MOD = 111;                          //  %
    int LSHIFT = 112;                       //  <<
    int LSHIFTX = 113;                      //  @left_shift
    int RSIGNEDSHIFT = 114;                 //  >>
    int RSIGNEDSHIFTX = 115;                //  @right_shift
    int RUNSIGNEDSHIFT = 116;               //  >>>
    int RUNSIGNEDSHIFTX = 117;              //  @right_unsigned_shift
    int PLUSASSIGN = 118;                   //  +=
    int MINUSASSIGN = 119;                  //  -=
    int STARASSIGN = 120;                   //  *=
    int SLASHASSIGN = 121;                  //  /=
    int ANDASSIGN = 122;                    //  &=
    int ANDASSIGNX = 123;                   //  @and_assign
    int ORASSIGN = 124;                     //  |=
    int ORASSIGNX = 125;                    //  @or_assign
    int XORASSIGN = 126;                    //  ^=
    int MODASSIGN = 127;                    //  %=
    int LSHIFTASSIGN = 128;                 //  <<=
    int LSHIFTASSIGNX = 129;                //  @left_shift_assign
    int RSIGNEDSHIFTASSIGN = 130;           //  >>=
    int RSIGNEDSHIFTASSIGNX = 131;          //  @right_shift_assign
    int RUNSIGNEDSHIFTASSIGN = 132;         //  >>>=
    int RUNSIGNEDSHIFTASSIGNX = 133;        //  @right_unsigned_shift_assign

    int DEFAULT = 0;

    String[] tokenImage = {
            "<EOF>",
            "\" \"",
            "\"\\t\"",
            "\"\\r\"",
            "\"\\f\"",
            "\"\\n\"",
            "<NONPRINTABLE>",
            "<SINGLE_LINE_COMMENT>",
            "<HASH_BANG_COMMENT>",
            "<MULTI_LINE_COMMENT>",
            "\"abstract\"",
            "\"boolean\"",
            "\"break\"",
            "\"class\"",
            "\"byte\"",
            "\"case\"",
            "\"catch\"",
            "\"char\"",
            "\"const\"",
            "\"continue\"",
            "\"default\"",
            "\"do\"",
            "\"double\"",
            "\"else\"",
            "\"enum\"",
            "\"extends\"",
            "\"false\"",
            "\"final\"",
            "\"finally\"",
            "\"float\"",
            "\"for\"",
            "\"goto\"",
            "\"if\"",
            "\"implements\"",
            "\"import\"",
            "\"instanceof\"",
            "\"int\"",
            "\"interface\"",
            "\"long\"",
            "\"native\"",
            "\"new\"",
            "\"null\"",
            "\"package\"",
            "\"private\"",
            "\"protected\"",
            "\"public\"",
            "\"return\"",
            "\"short\"",
            "\"static\"",
            "\"strictfp\"",
            "\"switch\"",
            "\"synchronized\"",
            "\"transient\"",
            "\"throw\"",
            "\"throws\"",
            "\"true\"",
            "\"try\"",
            "\"void\"",
            "\"volatile\"",
            "\"while\"",
            "<INTEGER_LITERAL>",
            "<DECIMAL_LITERAL>",
            "<HEX_LITERAL>",
            "<OCTAL_LITERAL>",
            "<FLOATING_POINT_LITERAL>",
            "<EXPONENT>",
            "<CHARACTER_LITERAL>",
            "<STRING_LITERAL>",
            "<FORMAL_COMMENT>",
            "<IDENTIFIER>",
            "<LETTER>",
            "<DIGIT>",
            "\"(\"",
            "\")\"",
            "\"{\"",
            "\"}\"",
            "\"[\"",
            "\"]\"",
            "\";\"",
            "\",\"",
            "\".\"",
            "\"=\"",
            "\">\"",
            "\"@gt\"",
            "\"<\"",
            "\"@lt\"",
            "\"!\"",
            "\"~\"",
            "\"?\"",
            "\":\"",
            "\"==\"",
            "\"<=\"",
            "\"@lteq\"",
            "\">=\"",
            "\"@gteq\"",
            "\"!=\"",
            "\"||\"",
            "\"@or\"",
            "\"&&\"",
            "\"@and\"",
            "\"++\"",
            "\"--\"",
            "\"+\"",
            "\"-\"",
            "\"*\"",
            "\"/\"",
            "\"&\"",
            "\"@bitwise_and\"",
            "\"|\"",
            "\"@bitwise_or\"",
            "\"^\"",
            "\"%\"",
            "\"<<\"",
            "\"@left_shift\"",
            "\">>\"",
            "\"@right_shift\"",
            "\">>>\"",
            "\"@right_unsigned_shift\"",
            "\"+=\"",
            "\"-=\"",
            "\"*=\"",
            "\"/=\"",
            "\"&=\"",
            "\"@and_assign\"",
            "\"|=\"",
            "\"@or_assign\"",
            "\"^=\"",
            "\"%=\"",
            "\"<<=\"",
            "\"@left_shift_assign\"",
            "\">>=\"",
            "\"@right_shift_assign\"",
            "\">>>=\"",
            "\"@right_unsigned_shift_assign\"",
    };

}
